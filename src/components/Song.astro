---
import type { listeningHistory } from "../lib/db";
import SpeakerIcon from "../icons/SpeakerIcon.astro";

type Props = {
  song: typeof listeningHistory.$inferInsert;
  idx: number;
  isPlaying?: boolean;
};

const { song, idx, isPlaying } = Astro.props;

function formatTime(time_ms: number) {
  const minutes = Math.floor(time_ms / 60000);
  const seconds = ((time_ms % 60000) / 1000).toFixed(0);
  return `${minutes}:${parseInt(seconds) < 10 ? "0" : ""}${seconds}`;
}
---

<div
  class="grid grid-cols-8 gap-4 items-center p-2 hover:bg-gray-800 transition-transform duration-300 ease-in-out rounded-lg transform hover:scale-105 cursor-pointer"
>
  <div class="flex place-content-center">
    {
      isPlaying ? (
        <SpeakerIcon class="w-6 h-6 text-green-500 animate-pulse" />
      ) : (
        <p class="text-gray-400">{idx + 1}</p>
      )
    }
  </div>

  <div class="flex col-span-4 space-x-4 items-center">
    <img
      class="rounded-md w-12 h-12 md:w-16 md:h-16 shadow-md"
      src={song.art}
      alt={song.song}
    />
    <div class="flex flex-col">
      <h3
        class="text-base md:text-lg font-semibold text-white truncate flex items-center space-x-2"
      >
        {song.song}
      </h3>
      <p class="text-sm text-gray-400 truncate">{song.artist}</p>
    </div>
  </div>

  <div class="hidden md:block col-span-2 text-gray-400 truncate">
    {song.album}
  </div>

  <div class="text-right text-gray-400">
    {formatTime(song.length)}
  </div>
</div>
